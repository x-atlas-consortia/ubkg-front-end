    server {
        listen 8080;

        # The server_name corresponds to a subnode that must be added to the local
        # machine's hosts file, mapped to the localhost/loopback IP (127.0.0.1).
        # This allows reverse proxying to the neo4j browser in ubkg-back-end.
        # This is a recommended method for reverse proxying neo4j browser.

        #server_name neo4j.ubkgbox.com;
        server_name localhost;

        # Logging to the mounted volume for outside container access
        access_log /usr/src/app/log/nginx_access_ubkg-front-end.log;
        error_log /usr/src/app/log/nginx_error_ubkg-front-end.log debug;

        # static request for favicon.ico (currently, only from ubkg-api)
        location = /favicon.ico {
            alias /usr/share/nginx/html/images/favicon.ico;
            access_log off;
            log_not_found off;
        }
        # health status endpoint
        location = /status {
             access_log off;
             default_type text/plain;
             add_header Content-Type text/plain;
             return 200 "ubkg-front-end: alive";
        }

        # Default location.
        # This location will be called either from the UBKGBox home page
        # or by a page in the backend Guesdt application.
        # This includes any static files in Guesdt with sources that are relative
        # paths.
        location / {
            # Path containing custom home page.
            root /usr/share/nginx;
            autoindex on;
            index home.html;
            try_files $uri $uri/ =404;
        }

        # Authenticate user in UMLS API; route authenticated users to the ubkg-api service.
        location /api/ {

            # Always enable CORS
            # Response to preflight requests
            if ($request_method = 'OPTIONS') {
                # The directive `add_header` doesn't work when response status code is 401, 403 or 500
                # The `always` parameter is specified so the header field will be added regardless of the response code
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, OPTIONS' always;

                # Custom headers and headers various browsers should be OK with but aren't
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,Authorization, MAuthorization,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;

                # Cache the response to this preflight request in browser for 24 hours (86400 seconds)
                # without sending another preflight request
                add_header 'Access-Control-Max-Age' 86400 always;

                add_header 'Content-Type' 'text/plain; charset=utf-8' always;
                add_header 'Content-Length' 0 always;
                return 204;
            }
            # Response to the original requests (HTTP methods are case-sensitive) with CORS enabled
            if ($request_method ~ (POST|GET|PUT)) {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,Authorization, MAuthorization,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
                add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
            }

            # Authenticate user against UMLS API, using the umls-key
            # provided in the home page.
            auth_request /umls-auth;

            # If authorized, forward to the ubkg-api server.
            # 1. Use the service name as defined in the Docker Compose file--**not** the
            #    container name.
            # 2. Dependency: defining the default Docker resolver at the http level.
            # 3. Optional ubkg-api endpoint information obtained from a session cookie
            #    written by the home page and mapped to $endpoint_path (in the http block)

            # Extract the endpoint argument from the URL.
            #if ($arg_endpoint ~* "^/?(.+)$") {
                #set $proxy_path /$1;
            #}
            #if ($arg_endpoint = "") {
                #set $proxy_path "/";
            #}
            #proxy_pass http://ubkg-api:8080$proxy_path;
            proxy_pass http://ubkg-api:8080/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

        }

        # Authentication via UMLS API.
        location /umls-auth {

            internal; # Make this location accessible only from within Nginx

            # Build the query string to pass umls-key as an argument.
            # umls-key is obtained from a session cookie set by the home page.
            set $query '';
            if ($umls_key != "") {
                set $query "umls-key=$umls_key";
            }


            # Proxy to the ubkg-auth server.
            # 1. Use the service name as defined in the Docker Compose file--**not** the
            #    container name.
            # 2. Dependency: defining the default Docker resolver at the http level.
            proxy_pass http://ubkg-auth:8080/umls-auth?$query;

            # No need to send the POST body
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-Request-Method $request_method;
            proxy_set_header X-Original-URI $request_uri;

            # Here we use $http_host in case the API is listing on a port other than 80.
            # Because $http_host = $host:$port
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        }

        location ~ ^/neo4j/browser/(.*\.(js|css|png|jpg|svg|woff|woff2|ttf|eot))$ {
            proxy_pass http://ubkg-back-end:7474/browser/$1;
            # Do NOT add auth_request here!
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect http://ubkg-back-end:7474/browser/ /neo4j/browser/;
        }

        # Authenticate user in UMLS API; route authenticated users to the ubkg-back-end service.
        location /neo4j/browser/ {

            # Always enable CORS
            # Response to preflight requests
            if ($request_method = 'OPTIONS') {
                # The directive `add_header` doesn't work when response status code is 401, 403 or 500
                # The `always` parameter is specified so the header field will be added regardless of the response code
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, OPTIONS' always;

                # Custom headers and headers various browsers should be OK with but aren't
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,Authorization, MAuthorization,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;

                # Cache the response to this preflight request in browser for 24 hours (86400 seconds)
                # without sending another preflight request
                add_header 'Access-Control-Max-Age' 86400 always;

                add_header 'Content-Type' 'text/plain; charset=utf-8' always;
                add_header 'Content-Length' 0 always;
                return 204;
            }
            # Response to the original requests (HTTP methods are case-sensitive) with CORS enabled
            if ($request_method ~ (POST|GET|PUT)) {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,Authorization, MAuthorization,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
                add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
            }

            # Authenticate user against UMLS API, using the umls-key
            # provided in the home page.
            auth_request /umls-auth;

            # If authorized, forward to the ubkg-back-end server.
            # 1. Use the service name as defined in the Docker Compose file--**not** the
            #    container name.
            # 2. Dependency: defining the default Docker resolver at the http level.

            # Rewrite redirects from Neo4j
            proxy_redirect http://localhost:7474/ /neo4j/browser/;
            proxy_redirect http://ubkg-back-end:7474/ /neo4j/browser/;
            proxy_redirect / /neo4j/browser/;

            proxy_pass http://ubkg-back-end:7474/browser/; # note the trailing slash
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # For Neo4j Browser WebSockets support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

        }

        # Redirect /neo4j/browser to /neo4j/browser/
        location = /neo4j/browser {
            return 301 /neo4j/browser/;
        }

        # Authenticate user in UMLS API; route authenticated users to Guesdt.
        location /guesdt {

            # Always enable CORS
            # Response to preflight requests
            if ($request_method = 'OPTIONS') {
                # The directive `add_header` doesn't work when response status code is 401, 403 or 500
                # The `always` parameter is specified so the header field will be added regardless of the response code
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, OPTIONS' always;

                # Custom headers and headers various browsers should be OK with but aren't
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,Authorization, MAuthorization,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;

                # Cache the response to this preflight request in browser for 24 hours (86400 seconds)
                # without sending another preflight request
                add_header 'Access-Control-Max-Age' 86400 always;

                add_header 'Content-Type' 'text/plain; charset=utf-8' always;
                add_header 'Content-Length' 0 always;
                return 204;
            }
            # Response to the original requests (HTTP methods are case-sensitive) with CORS enabled
            if ($request_method ~ (POST|GET|PUT)) {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,Authorization, MAuthorization,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
                add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
            }

            # Authenticate user against UMLS API, using the umls-key
            # provided in the home page.
            auth_request /umls-auth;

            # If authorized, forward to the Guesdt app on
            # the ubkg-guesdt server.
            # 1. Use the service name as defined in the Docker Compose file--**not** the
            #    container name.
            # 2. Dependency: defining the default Docker resolver at the http level.
            proxy_pass http://ubkg-guesdt:8080/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

       }

        # Static files in the guesdt backend
       location /static/ {
            proxy_pass http://ubkg-guesdt:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
       }

       # Guesdt user guide
       location =/userguide.html {
            proxy_pass http://ubkg-guesdt:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Authenticate user in UMLS API; route authenticated users to Swagger.
        location /swagger/ {

            # Always enable CORS
            # Response to preflight requests
            if ($request_method = 'OPTIONS') {
                # The directive `add_header` doesn't work when response status code is 401, 403 or 500
                # The `always` parameter is specified so the header field will be added regardless of the response code
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, OPTIONS' always;

                # Custom headers and headers various browsers should be OK with but aren't
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,Authorization, MAuthorization,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;

                # Cache the response to this preflight request in browser for 24 hours (86400 seconds)
                # without sending another preflight request
                add_header 'Access-Control-Max-Age' 86400 always;

                add_header 'Content-Type' 'text/plain; charset=utf-8' always;
                add_header 'Content-Length' 0 always;
                return 204;
            }
            # Response to the original requests (HTTP methods are case-sensitive) with CORS enabled
            if ($request_method ~ (POST|GET|PUT)) {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,Authorization, MAuthorization,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
                add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
            }

            # Authenticate user against UMLS API, using the umls-key
            # provided in the home page.
            auth_request /umls-auth;

            # If authorized, forward to the Swagger UI app on
            # the ubkg-swagger server.
            # 1. Use the service name as defined in the Docker Compose file--**not** the
            #    container name.
            # 2. Dependency: defining the default Docker resolver at the http level.
            proxy_pass http://ubkg-swagger:8080/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

       }

    }
