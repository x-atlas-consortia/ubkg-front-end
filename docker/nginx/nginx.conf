# Run nginx as an unprivileged user, so an attacker cannot do much if the container is compromised.
user nginx;
# Set the number of worker processes.
worker_processes 1;
# Configure logging.
error_log /var/log/nginx/error.log debug;
pid /var/run/nginx.pid;
# Set number of worker connections.
events {
worker_connections 1024;
}
http {

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # default logging format
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" "$upstream_addr"';

    access_log  /var/log/nginx/access.log  main;

    server {
        #listen 80;
        #listen [::]:80; # IPv6
        listen 8080;

        keepalive_timeout 3600;
        proxy_read_timeout 3600;

        # We need this logging for inspecting auth requests from other internal services
        # Logging to the mounted volume for outside container access
        access_log /usr/src/app/log/nginx_access_ubkg-front-end.log;
        error_log /usr/src/app/log/nginx_error_ubkg-front-end.log debug;

         # health status endpoint
         location = /status {
             access_log off;
             default_type text/plain;
             add_header Content-Type text/plain;
             return 200 "alive";
        }

        # Route all traffic to home.html.
         location / {
            index home.html;
            root /usr/share/nginx/html/;
            try_files $uri $uri/ =404;
         }

         location /go {


            # Always enable CORS
            # Response to preflight requests
            if ($request_method = 'OPTIONS') {
                # The directive `add_header` doesn't work when response status code is 401, 403 or 500
                # The `always` parameter is specified so the header field will be added regardless of the response code
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, OPTIONS' always;

                # Custom headers and headers various browsers should be OK with but aren't
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,Authorization, MAuthorization,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;

                # Cache the response to this preflight request in browser for 24 hours (86400 seconds)
                # without sending another preflight request
                add_header 'Access-Control-Max-Age' 86400 always;

                add_header 'Content-Type' 'text/plain; charset=utf-8' always;
                add_header 'Content-Length' 0 always;
                return 204;
            }
            # Response to the original requests (HTTP methods are case-sensitive) with CORS enabled
            if ($request_method ~ (POST|GET|PUT)) {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,Authorization, MAuthorization,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
                add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
            }

            # Any request to this server will first be sent to this URL
            auth_request /umls-auth;

            proxy_pass $request_uri;
        }

        # Serve requests for static resources such as JavaScript, Style sheets and images
        location ~* \.(js|jpg|png|css|pdf)$ {
            root /usr/share/nginx/html/;
        }

        location /umls-auth {

            internal; # Make this location accessible only from within Nginx

            # This address is where umls-auth will be listening.
            # Add the original arguments to the upstream URL.


            proxy_pass http://127.0.0.1:7200/umls-auth;

            # No need to send the POST body
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-Request-Method $request_method;
            proxy_set_header X-Original-URI $request_uri;
            # Here we use $http_host in case the API is listing on a port other than 80.
            # Because $http_host = $host:$port
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

    }
    # Optimize file sending.
    sendfile        on;
    keepalive_timeout  65;
}